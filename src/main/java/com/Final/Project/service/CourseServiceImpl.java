package com.Final.Project.service;


import com.Final.Project.dto.CourseDTO;
import com.Final.Project.entity.Course;
import com.Final.Project.entity.Lesson;
import com.Final.Project.entity.Users;
import com.Final.Project.exception.ProjectIllegalArgumentException;
import com.Final.Project.mapper.CourseMapper;
import com.Final.Project.mapper.LessonMapper;
import com.Final.Project.repository.CourseDao;
import com.Final.Project.repository.UsersDao;
import com.Final.Project.utils.ServiceHelper;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

@Service
@Transactional
public class CourseServiceImpl implements CourseService {

    @Autowired
    private CourseDao courseDao;  // to perform crud operations on course entity

    @Autowired
    private UsersDao usersDao;

    @Autowired
    private CourseMapper courseMapper; //to map course entity to dto and vice versa

    @Autowired
    private LessonMapper lessonMapper;

    @Autowired
    private ServiceHelper serviceHelper;


    //creation
    @Override
    public CourseDTO saveCourse(CourseDTO courseDTO) {

        //validation 1: Course name should not be empty or null
        if (courseDTO.getCourseName() == null || courseDTO.getCourseName().trim().isEmpty()) {
            throw new ProjectIllegalArgumentException("Course name should not be null or empty", HttpStatus.BAD_REQUEST);
        }

        //convert dto to entity
        Course course = courseMapper.dtoToEntity(courseDTO);

        if(courseDTO.getStudentID()!=null) {

            course.setStudents(
                    courseDTO
                            .getStudentID()
                            .stream()
                            .map(id -> usersDao.findById(id).orElse(null))
                            .filter(Objects::nonNull)
                            .collect(Collectors.toSet())
            );
        }

        //save the course to db[save it in a variable[saved course] because after saving u also get the value of autogenerated id.
        Course savedCourse = courseDao.save(course);

        //convert entity to mapper and return it.
        return courseMapper.entityToDto(savedCourse);
    }

    //read all data
    @Override
    public List<CourseDTO> getAllCourses() {
        List<Course> courses = courseDao.findAll();
        return courses
                .stream()
                .filter(Course::isActive)
                .map(courseMapper::entityToDto)
                .toList();

    }

    //read by id
    @Override
    public CourseDTO getCourseById(int id) {
        //Validation 1: Fetch course by id or throw error
        Course course = courseDao.findById(id).orElseThrow(() ->
                new ProjectIllegalArgumentException("The course you are trying to retrieve doesn't exists.",HttpStatus.NOT_FOUND));
        if(!course.isActive()){
            throw new ProjectIllegalArgumentException("The course you are trying to retrieve is inactive.",HttpStatus.BAD_REQUEST);
        }
        //convert entity to dto and return
        return courseMapper.entityToDto(course);
    }

    @Override
    public CourseDTO updateCourse(int id, CourseDTO courseDTO) {

        //Validation : only the creator of course can update it.
        serviceHelper.checkCourseAuthority(id);

        Course course = courseDao.findById(id)
                .orElseThrow(() -> new ProjectIllegalArgumentException("Updation Failed. Course Id " + id + " doesn't exist.",HttpStatus.NOT_FOUND));

        // Update course fields
        if (courseDTO.getCourseName() != null && !courseDTO.getCourseName().trim().isEmpty()) {
            course.setCourseName(courseDTO.getCourseName());
        }

        // Handle lessons
        if (courseDTO.getLessons() != null) {
            // Fetch current lessons
            Set<Lesson> existingLessons = course.getLessons();

            // Map lessons from DTO to entity
            List<Lesson> updatedLessons = courseDTO.getLessons().stream()
                    .map(lessonDTO -> {
                        Lesson lesson = lessonMapper.dtoToEntity(lessonDTO);
                        lesson.setCourse(course); // Ensure lesson references the course
                        return lesson;
                    })
                    .toList();

            // Update existing lessons with new data
            course.getLessons().clear(); // Remove all existing lessons
            course.getLessons().addAll(updatedLessons); // Add updated lessons
        }

        if (courseDTO.getStudentID() != null) {
            Set<Users> existingStudents = course.getStudents();
            Set<Users> updatedStudents = courseDTO
                    .getStudentID()
                    .stream()
                    .map(sid -> usersDao.findById(sid).orElseThrow(() ->
                            new ProjectIllegalArgumentException("no such student exists.",HttpStatus.NOT_FOUND)))
                    .collect(Collectors.toSet());

            course.getStudents().clear();
            course.getStudents().addAll(updatedStudents);
        }


        // Save and return updated course
        Course savedCourse = courseDao.save(course);
        return courseMapper.entityToDto(savedCourse);
    }



    //delete by id
    @Override
    public void deleteCourse(int courseId) {

        //Validation : only the creator of course can delete it.
        serviceHelper.checkCourseAuthority(courseId);


        // Fetch the course entity
        Course course = courseDao.findById(courseId)
                .orElseThrow(() -> new ProjectIllegalArgumentException("Course not found",HttpStatus.NOT_FOUND));


        // Optional: Remove relationships with students
        for (Users student : course.getStudents()) {
            student.getAllocatedCourse().remove(course);
        }

        // Delete the course
        courseDao.delete(course);

        // Log the deletion
        System.out.println("Course with ID " + courseId + " has been deleted.");
    }

    @Override
    public void updateCourseStatus(CourseDTO courseDTO, int id) {

        if(courseDTO== null){
            throw new ProjectIllegalArgumentException("No content",HttpStatus.NO_CONTENT);
        }

        serviceHelper.checkCourseAuthority(id);

        //validation 1: check if the course exists
        Course course=courseDao.findById(id).orElseThrow(()->
            new ProjectIllegalArgumentException("No course found",HttpStatus.NOT_FOUND));

        //set the status of course
        boolean activeStatus;
        if(courseDTO.getActiveId() == 1) {
            activeStatus=true;
            course.setActive(true);
        }else{
            activeStatus=false;
            course.setActive(false);
        }

        //set the same status for all the associated lessons
        List<Lesson>lessons=course.getLessons().stream().toList();

        for(Lesson lesson: lessons){
            lesson.setActive(activeStatus);
        }

        courseDao.save(course);
        System.out.println("Course isActive after save: " + course.isActive());



    }


}
